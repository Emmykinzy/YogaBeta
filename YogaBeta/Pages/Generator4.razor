@page "/Generator4"
@using Services
@using Model
@using System.Timers;
@using Newtonsoft.Json;
@inject ICosmosDbService CosmosDbService




@if (!started)
{
    <h4>Slide Show</h4>
    <button class="btn btn-primary" @onclick="(() => SetTimer())">Start Class</button>
}
else
{
    <div class="progress">
        <div class="progress-bar bg-info progress-bar-striped progress-bar-animated" style="width:@perc%">@Math.Round(perc)%</div>
    </div>
    <br />
    <img src="/images/@picture" width="200" height="200" />
    <p>@view seconds</p>


    <ul class="list-group">
        <li class="list-group-item">@prev</li>
        <li class="list-group-item">
            <img src="/images/@picture" width="200" height="200" />
            <span class="badge badge-pill badge-info">@view seconds</span>
        </li>
        <li class="list-group-item">@next</li>
    </ul>

    <br />
    <br />
    <button @onclick="(() => pause())">
        @if (bTimer.Enabled == true)
        {
            @((MarkupString)"Pause")
        }
        else
        {
            @((MarkupString)"Continue")
        }
    </button>
}

@code {
    [Parameter]
    public int PoseDuration { get; set; }

    [Parameter]
    public int PrepDuration { get; set; }

    [Parameter]
    public decimal ClassDuration { get; set; }

    [Parameter]
    public string Shavasana { get; set; }

    [Parameter]
    public int ShavasanaDuration { get; set; }

    [Parameter]
    public string[] JsonPoses { get; set; }


    Timer aTimer;
    Timer bTimer;
    string next;
    string prev;
    decimal restPer;
    decimal posePer;
    decimal shavPer;
    decimal perc = 0;
    string view;
    string picture;
    decimal count;
    decimal rest;
    int shavasana;
    bool shavasanaDone;
    Random rnd = new Random();
    List<Chakra> chakras;
    int chakraCounter = 0;
    Poses p;
    Chakra c;
    List<Poses> poses = new List<Poses>();

    bool started;
    int length;
    int ran;
    protected override async Task OnInitializedAsync()
    {
        //JavaScriptSerializer json_serializer = new JavaScriptSerializer();

        foreach (string p in JsonPoses)
        {
            Poses pose = JsonConvert.DeserializeObject<Poses>(p);
            //Poses pose = (Poses)json_serializer.DeserializeObject(p);
            poses.Add(pose);
        }

        p = poses[chakraCounter];
        picture = p.picture;

    }


    public void bEvent(Object source, ElapsedEventArgs e)
    {

        if (Shavasana == "Before Class" && shavasana > 0)
        {
            picture = "shavasana.png";
            view = strToMinutes(shavasana);
            shavasana--;
            shavasanaDone = true;
        }
        else
        {
            if (count == PoseDuration)
            {
                picture = poses[chakraCounter].picture;
                next = poses[chakraCounter].name;
                if (shavasanaDone == true)
                {
                    shavasanaDone = false;
                    perc += shavPer;
                }
                else
                {
                    perc += restPer;
                }
            }

            if (count > -1)
            {
                view = strToMinutes(count);
                count--;
            }
            else
            {
                if (count <= 0 && rest == PrepDuration)
                {
                    perc += posePer;
                }
                if (chakraCounter == 6)
                {
                    next = "";
                    if (Shavasana == "After Class" && shavasana > 0)
                    {
                        picture = "shavasana.png";
                        view = strToMinutes(shavasana);
                        shavasana--;
                    }
                    else
                    {
                        picture = "done.png";
                        bTimer.Stop();
                        bTimer.Dispose();
                    }
                }
                else if (rest > -1)
                {
                    picture = "rest.png";
                    view = strToMinutes(rest);
                    rest--;
                }
                else
                {
                    perc += restPer;
                    rest = PrepDuration;
                    count = PoseDuration;
                    view = strToMinutes(count);
                    chakraCounter++;
                    p = poses[chakraCounter];
                    picture = p.picture;
                    next = poses[chakraCounter + 1].name;

                }
            }
        }
        InvokeAsync(() =>
        {
            StateHasChanged();
        });
    }

    public void SetTimer()
    {

        shavasana = ShavasanaDuration * 60;
        count = PoseDuration;
        rest = PrepDuration;
        decimal prep = rest / 60;
        decimal duration = prep / ClassDuration;
        shavPer = (ShavasanaDuration / ClassDuration) * 100;
        restPer = (duration * 100);
        posePer = (((count / 60) / ClassDuration) * 100);
        started = true;

        if (Shavasana == "Before Class")
        {
            shavasanaDone = false;
            picture = "shavasana.png";
            next = poses[chakraCounter].name;
            view = strToMinutes(shavasana);
        }
        else
        {
            view = strToMinutes(count);
        }

        bTimer = new Timer(1000);
        bTimer.Start();
        bTimer.Elapsed += bEvent;
        itStart();

    }

    public void itStart()
    {
        foreach (Poses po in poses)
        {
            p = po;
            count = PoseDuration;

        }
    }

    public string strToMinutes(decimal m)
    {
        string seconds;


        if (m % 60 < 10)
        {
            seconds = "0" + m % 60;
        }
        else
        {
            seconds = "" + m % 60;
        }

        if (m % 60 == 0 && m > 0)
        {
            return m / 60 + ":00";
        }
        else if (m % 60 > 0 && (m - (m % 60) > 0))
        {
            decimal min = m / 60;
            int a = Convert.ToInt32(Math.Floor(min));
            return a + ":" + seconds;
        }
        else if (m < 60)
        {
            return "0:" + seconds;
        }
        else
        {
            return "error";
        }

    }

    public void pause()
    {
        if (bTimer.Enabled == true)
        {
            bTimer.Stop();
        }
        else
        {
            bTimer.Start();
        }
    }

}




