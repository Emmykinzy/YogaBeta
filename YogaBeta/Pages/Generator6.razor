@page "/Generator6"
@using Model
@using System.Timers;


<div class="progress">
    <div class="progress-bar bg-info progress-bar-striped progress-bar-animated" style="width:@perc%">@Math.Round(perc)%</div>
</div>
<br />



<ul class="list-group">
    <li class="list-group-item currPose">
        <img src="/images/@picture" width="200" height="200" /><br />
        <span>@name</span>
        <br /><br />
        <div class="badge-pill badge-dark display-4 slidePill d-flex justify-content-center">&nbsp;@view.ToString("m\\:ss")&nbsp;</div>
        <br />
    </li>
    <li class="list-group-item currPose">Upcoming: @next</li>
</ul>

<br />
<br />
<button @onclick="pause">
    @if (aTimer.Enabled == true)
    {
        @((MarkupString)"Pause")
    }
    else
    {
        @((MarkupString)"Continue")
    }
</button>


@code {
    [Parameter]
    public YogaClass Yoga { get; set; }

    TimeSpan view;
    int timeCount;
    int arrPos;
    string next;
    string name;
    decimal perc = 0;
    decimal restPer;
    decimal posePer;
    decimal shavPer;
    string picture;
    int chakraCounter = 0;
    Timer aTimer;
    SlideShow curr;
    List<SlideShow> sList  = new List<SlideShow>();

    protected override async Task OnInitializedAsync()
    {

        if (Yoga.Shavasana == "Before Class")
        {
            SlideShow s1 = new SlideShow { Name = "Shavasana", Picture = "Shavasana.png", Time = Yoga.ShavasanaLength * 60, Type = "Shav" };
            sList.Add(s1);
        }

        foreach (Poses p1 in Yoga.PoseList)
        {
            SlideShow s2 = new SlideShow { Name = p1.name, Picture = p1.picture, Time = Yoga.PoseDuration * 60, Type = "Pose" };

            sList.Add(s2);

            SlideShow s3 = new SlideShow { Name = "Rest", Picture = "Rest.png", Time = Yoga.PrepDuration, Type = "Rest" };
            sList.Add(s3);

        }

        if (Yoga.Shavasana == "After Class")
        {
            SlideShow s4 = new SlideShow { Name = "Shavasana", Picture = "Shavasana.png", Time = Yoga.ShavasanaLength * 60, Type = "Shav" };
            sList.Add(s4);
        }


        decimal total = 0;
        foreach (SlideShow slide in sList)
        {
            total += slide.Time;
        }

        SlideShow po = sList.Where(x => x.Type == "Pose").First();
        SlideShow re = sList.Where(x => x.Type == "Rest").First();
        SlideShow sh = sList.Where(x => x.Type == "Shav").FirstOrDefault();

        if (sh != null)
        {
            shavPer = (sh.Time / total) * 100;
        }
        restPer = (re.Time / total) * 100;
        posePer = (po.Time / total) * 100;

        arrPos = 0;
        curr = sList[0];
        SetTimer();
    }

    public void SetTimer()
    {
        timeCount = Decimal.ToInt32(curr.Time);
        view = new TimeSpan(0, 0, timeCount);
        name = curr.Name;
        picture = curr.Picture;
        next = sList[arrPos + 1].Name;
        aTimer = new Timer(1000);
        aTimer.Start();
        aTimer.Elapsed += aEvent;
    }

    public void aEvent(Object source, ElapsedEventArgs e)
    {
        if (timeCount > 0)
        {
            timeCount--;
            view = new TimeSpan(0, 0, timeCount);
        }
        else
        {
            arrPos++;
            if (curr.Type == "Shav")
            {
                perc += shavPer;
            }
            else if (curr.Type == "Pose")
            {
                perc += posePer;
            }
            else if (curr.Type == "Rest")
            {
                perc += restPer;
            }
            if (arrPos != sList.Count-1)
            {
                curr = sList[arrPos];
                name = curr.Name;
                picture = curr.Picture;
                timeCount = Decimal.ToInt32(curr.Time);
                if (arrPos == sList.Count-2)
                {
                    next = "Finish";
                }
                else
                {
                    next = sList[arrPos + 1].Name;
                }
                next = sList[arrPos + 1].Name;
                view = new TimeSpan(0, 0, timeCount);

            }
            else
            {

                picture = "done.png";
                name = "Done";
                next = "";
                aTimer.Stop();
                aTimer.Dispose();

            }
        }

        InvokeAsync(() =>
        {
            StateHasChanged();
        });
    }


    public void pause()
    {
        if (aTimer.Enabled == true)
        {
            aTimer.Stop();
        }
        else
        {
            aTimer.Start();
        }
    }
}
