@using Model
@using System.Timers 
<h3 class="mb-3">Class Summary</h3>

<div class="d-flex justify-content-center">
    <div class="d-flex flex-column mr-5">
        @foreach (var pose in YogaClass.PoseList)
        {
            <div class="d-inline-flex">
                <img src="/images/@pose.picture" style="width:50px;height:50px;" />
                <div class="align-self-center">@pose.name</div>
            </div>
        }
    </div>
    <div class="d-flex flex-column align-self-center mr-4">
        <div class="d-inline-flex mb-2">
            <div>Pose Duration:</div>
            <div class="ml-auto">@YogaClass.PoseDuration (minutes)</div>
        </div>
        <div class="d-inline-flex mb-2">
            <div>Duration between poses:</div>
            <div class="ml-auto">@YogaClass.PrepDuration (seconds)</div>
        </div>
        <div class="d-inline-flex mb-2">
            <div>Shavasana:</div>
            <div class="ml-auto">@YogaClass.Shavasana</div>
        </div>
        <div class="d-inline-flex mb-2">
            <div>Shavasana Length:</div>
            <div class="ml-auto">@YogaClass.ShavasanaLength (minutes)</div>
        </div>
        <div class="d-inline-flex mb-4">
            <div>Total Class Time:</div>
            <div class="ml-auto">@TotalClassTime (mm:ss)</div>
        </div>
        <a class="btn btn-primary" href="/Confirmation">Start</a>
        @*<button class="btn btn-primary" @onclick="StartStopTimer">@StartStopButtonTxt</button>*@
        @*<button class="btn btn-primary" @onclick="CancelTimer">Cancel Class</button>*@
        @if (ClassStarted)
        {
            <div class="d-inline-flex">
                <div>Remaining Class Time:</div>
                <div class="ml-auto">@RemainingClassTimeDsp</div>
            </div>
            <div class="d-inline-flex">
                <div>Event Type:</div>
                <div class="ml-auto">@cEventList[CurrentEventIndex].Type</div>
            </div>
            <div class="d-inline-flex">
                <div>Remaining Event Time:</div>
                <div class="ml-auto">@RemainingEventTimeDsp</div>
            </div>
        }

    </div>
</div>

@code {
    [Parameter]
    public YogaClass YogaClass { get; set; }

    bool ClassStarted = false;
    String TotalClassTime;

    TimeSpan RemainingClassTime;
    String RemainingClassTimeDsp;

    TimeSpan RemainingEventTime;
    String RemainingEventTimeDsp;

    Timer ClassTimer;

    //int TimeRemaining = 0;
    String StartStopButtonTxt;
    List<ClassEvent> cEventList;
    int CurrentEventIndex = 0;
    TimeSpan zeroDuration = TimeSpan.FromSeconds(0.0);


    public class ClassEvent
    {
        public String Type { get; set; }
        public TimeSpan Duration { get; set; }
        public int PoseIndex { get; set; }
    }

    protected override void OnInitialized()
    {
        //Set the total class time.
        RemainingClassTime = new TimeSpan(0, YogaClass.TotalPoseMinutes + YogaClass.ShavasanaLength, YogaClass.TotalPoseIntervalSeconds);

        // Format the time for mm:ss (use @"mm\:ss" or "mm\\:ss"
        TotalClassTime = RemainingClassTime.ToString(@"mm\:ss");
        RemainingClassTimeDsp = TotalClassTime;
        StartStopButtonTxt = "Start Class";

        //Build list of class events
        cEventList = new List<ClassEvent>();

        //Check if there is a Shavasana before class starts
        if (YogaClass.Shavasana == "Before Class")
        {
            ClassEvent prepEvent = new ClassEvent();
            prepEvent.Type = "PREP";
            prepEvent.Duration = new TimeSpan(0, 0, YogaClass.PrepDuration);
            cEventList.Add(prepEvent);

            ClassEvent poseEvent = new ClassEvent();
            poseEvent.Type = "SHAVA";
            poseEvent.Duration = new TimeSpan(0, YogaClass.ShavasanaLength, 0);
            cEventList.Add(poseEvent);
        }

        //Add to the event list from the poses selected
        for (int i = 0; i < YogaClass.PoseList.Count(); i++)
        {
            ClassEvent prepEvent = new ClassEvent();
            prepEvent.Type = "PREP";
            prepEvent.Duration = new TimeSpan(0, 0, YogaClass.PrepDuration);
            cEventList.Add(prepEvent);

            ClassEvent poseEvent = new ClassEvent();
            poseEvent.Type = "POSE";
            poseEvent.Duration = new TimeSpan(0, YogaClass.PoseDuration, 0);
            poseEvent.PoseIndex = i;
            cEventList.Add(poseEvent);
        }
        //Check if there is a Shavasana After class
        if (YogaClass.Shavasana == "After Class")
        {
            ClassEvent prepEvent = new ClassEvent();
            prepEvent.Type = "PREP";
            prepEvent.Duration = new TimeSpan(0, 0, YogaClass.PrepDuration);
            cEventList.Add(prepEvent);

            ClassEvent poseEvent = new ClassEvent();
            poseEvent.Type = "SHAVA";
            poseEvent.Duration = new TimeSpan(0, 0, YogaClass.ShavasanaLength);
            cEventList.Add(poseEvent);
        }

        //Display the information for the first event.
        RemainingEventTime = cEventList[CurrentEventIndex].Duration;
        RemainingEventTimeDsp = RemainingEventTime.ToString(@"mm\:ss");

    }

    public void OnTimedEvent(Object source, ElapsedEventArgs e)
    {
        RemainingClassTime = RemainingClassTime.Subtract(TimeSpan.FromSeconds(1));
        RemainingClassTimeDsp = RemainingClassTime.ToString(@"mm\:ss");
        RemainingEventTime = RemainingEventTime.Subtract(TimeSpan.FromSeconds(1));
        RemainingEventTimeDsp = RemainingEventTime.ToString(@"mm\:ss");

        //Check is Class has ended.
        if (RemainingClassTime > zeroDuration)
        {   //Class is still in active


            //Check if the event is still active
            if (RemainingEventTime >= zeroDuration)
            {//Yup this acitve

            } else
            {
                CurrentEventIndex += 1;
                RemainingEventTime = cEventList[CurrentEventIndex].Duration;
                RemainingEventTime = RemainingEventTime.Subtract(TimeSpan.FromSeconds(1));
                RemainingEventTimeDsp = RemainingEventTime.ToString(@"mm\:ss");
            }

            //Because changes are happening within a timer event we need to let the 
            //system know that the state of certain elements have changed.
            InvokeAsync(StateHasChanged);
        } else
        {   //Class has end.  Clean up the timer
            ClassTimer.Stop();
            ClassTimer.Dispose();
        }

    }

    public void StartStopTimer()
    {
        //Check is the timer exists or not.
        if (ClassTimer == null)
        {
            // Setup the Timer
            ClassTimer = new Timer(1000);
            ClassTimer.Elapsed += OnTimedEvent;
            ClassTimer.AutoReset = true;
            ClassTimer.Enabled = true;

            //Now the timer is running, change the button text.
            StartStopButtonTxt = "Pause";
            ClassStarted = true;
        } else {
            // Timer exists. check if we stop or restart.
            if (ClassTimer.Enabled == true)
            {
                ClassTimer.Stop();
                StartStopButtonTxt = "Continue";
            }
            else
            {
                ClassTimer.Start();
                StartStopButtonTxt = "Pause";
            }
        }
    }

    public void CancelTimer()
    {
        if (ClassTimer.Enabled == true)
        {
            ClassTimer.Stop();
            ClassTimer.Dispose();
        }

    }

}
