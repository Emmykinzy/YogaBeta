@page "/Generator2"
@using Services
@using Model
@inject ICosmosDbService CosmosDbService
@inject IJSRuntime js;





        <img src="/images/@p.picture" style="width:600px">
        <div class="text">@p.name</div>


<button class="btn btn-primary" @onclick="(() => BackChakra())">Back</button>
<button class="btn btn-primary" @onclick="(() => NextChakra())">Next</button>


<br>




@code {
    Random rnd = new Random();
    List<Chakra> chakras;
    int chakraCounter = 0;
    Chakra c;
    List<Poses> poses = new List<Poses>();
    Poses p;
    bool poseSelected;
    int length;
    int ran;
    protected override async Task OnInitializedAsync()
    {
        chakras = await CosmosDbService.GetChakrasAsync();
        c = chakras[0];
        foreach (Chakra ch in chakras)
        {
            length = ch.Poses.Length;
            ran = rnd.Next(1, length);
            Poses pose = ch.Poses.Where(x => x.id == ran).FirstOrDefault();
            poses.Add(pose);
        }
        p = poses[0];

    }

    private void PlayAudioFile()
    {
        js.InvokeVoidAsync("PlayAudioFile", "/audio/Tingsha.wav");
    }

    private void NextChakra()
    {
        chakraCounter++;
        c = chakras[chakraCounter];
        p = poses[chakraCounter];
        PlayAudioFile();

    }

    private void BackChakra()
    {
        chakraCounter--;
        c = chakras[chakraCounter];
        p = poses[chakraCounter];
        PlayAudioFile();
    }

    private void NewRanPose()
    {
        c = chakras[chakraCounter];
        length = c.Poses.Length;
        ran = rnd.Next(1, length);
        Poses pose = c.Poses[ran - 1];
        poses[chakraCounter] = pose;
        p = pose;
    }

    private void NewPose()
    {
        c = chakras[chakraCounter];
        poseSelected = true;
    }

    private void NewPoseSelected(Poses pose)
    {
        poseSelected = false;
        poses[chakraCounter] = pose;
        p = pose;
    }
}




